
//O(N^3)

class Solution{
    public:
    // arr[] : int input array of integers
    // k : the quadruple sum required
    vector<vector<int> > fourSum(vector<int> &arr, int k) {
        // Your code goes here
        
        int n = arr.size();
        vector<vector<int>> ans;
        
        sort(arr.begin(), arr.end());
        
        for(int i=0;i<n;i++){
            for(int j=i+1;j<n;j++){
                
                int target = k - (arr[i] + arr[j]);
                
                int front = j+1;
                int back = n-1;
                
             
                while(back > front){
                    
                    int sum = arr[front] + arr[back];
                     
                    if(target == sum){
                        vector<int> quad(4,0);
                        quad[0] = arr[i];
                        quad[1] = arr[j];
                        quad[2] = arr[front];
                        quad[3] = arr[back];
                        //quad.push_back($)
                        ans.push_back(quad);
                        
                        //skipping duplicates for front, back
                        while(front < back && arr[front] == quad[2])
                            front++;
                        while(front < back && arr[back] == quad[3])
                            back--;
                       
                    }
                    else{
                        if(target > sum){
                            front++;
                        }
                        else
                            back--;
                    }
                    
                }
                
            while(j+1 < n && arr[j+1] == arr[j])
                j++;
            }
        while(i+1 < n && arr[i+1] == arr[i])
            i++;
        }
        
    return ans;
    }
};
