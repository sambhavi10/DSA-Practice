class Solution {
  public:
    // Function to detect cycle in an undirected graph.
    
    bool checkForCycle(int i, int V, vector<int> adj[], vector<int> &visited){
        
            queue<pair<int, int>>  Q;
            
            Q.push({i, -1});
            visited[i] = 1;
            
            while(!Q.empty()){
                
                int node = Q.front().first;
                int parent = Q.front().second;
                Q.pop();
                
                for(auto it : adj[node]){
                    if(!visited[it]){
                        visited[it] = 1;
                        Q.push({it, node});
                    }
                    // else if(visited[it] && parent == it){
                    //     Q.push({it, node});
                    // }
                    // else if(visited[it] && parent != it)
                    //     return true;
                    else if(parent != it)
                        return true;
                }
            }
               return false;
    }
    public:
    bool isCycle(int V, vector<int> adj[]) {
        
        //starts at node value = 0, so start from 0 to V-1
        vector<int> visited(V, 0);
        
        for(int i = 0; i < V; i++){
            //int i=1;
            if(!visited[i]){
                if(checkForCycle(i, V, adj, visited))
                    return true;
      }
    }
    return false;
    }
};
