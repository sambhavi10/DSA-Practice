//Recursive Code
class Solution{   
public:

    bool findSubsets(vector<int> &arr, int sum, int n){
        
        if(sum == 0)
            return true;
        else if(n == 0)
            return false;
        if(arr[n-1] <= sum){
            return findSubsets(arr, sum-arr[n-1], n-1) || findSubsets(arr, sum, n-1);
        }
        else{
            return findSubsets(arr, sum, n-1);
        }
    }

    bool isSubsetSum(vector<int>arr, int sum){
        int n = arr.size();
        return findSubsets(arr, sum, n);
    }
};


//TOP DOWN CODE
class Solution{   
public:
    
    bool findSubsets(vector<int> &arr, int sum, int n){
        int t[n+1][sum+1];
        
        //INITIALIZATION
        for(int i=0;i<n+1;i++){
            for(int j=0;j<sum+1;j++){
                if(j == 0)
                    t[i][j] = true;
                else
                    t[i][j] = false;
            }
        }
        for(int i=1;i<n+1;i++){
            for(int j=1;j<sum+1;j++){
                if(arr[i-1] <= j){
                    t[i][j] = t[i-1][j-arr[i-1]] || t[i-1][j];
                }
                else
                    t[i][j] = t[i-1][j];
            }
        }
        return t[n][sum];
    }

    bool isSubsetSum(vector<int>arr, int sum){
        int n = arr.size();
        return findSubsets(arr, sum, n);
    }
};
