class Solution{
    
    public:
    static bool comp(Item a, Item b){
        double r1 = (double)a.value / (double)a.weight;
        double r2 = (double)b.value / (double)b.weight;
        return r1 > r2;
    }
    //Function to get the maximum total value in the knapsack.
    double fractionalKnapsack(int W, Item arr[], int n){
        
        sort(arr, arr+n, comp);
        int currWt = 0;
        double finalVal = 0.0;
        
        //iterating in the array
        //The first element has the max val/wt
        for(int i=0;i<n;i++){
            
            //Entire Item fits
            if(currWt + arr[i].weight <= W){
                currWt += arr[i].weight;
                finalVal += arr[i].value;
            }
            else{
                int remaining = W - currWt;
                finalVal += (double)remaining/(double)arr[i].weight * arr[i].value;
                break;
                
            }
        }
        return finalVal;
    }
        
};
