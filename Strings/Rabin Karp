//PLEASE REVISE

class Solution{
    
    public:
    vector <int> search(string pat, string text){
            
        #define d 256
        int m = pat.length();
        int n = text.length();
        int p = 0, t = 0, h = 1;
        int q = INT_MAX;
        int j, i;
        vector<int> ans;
    
        for(int i=0;i<m-1;i++){
            h = (d*h) % q;
        }
        
        //calculating hash values of pattern and first window of text(m sized)
        for(i = 0; i < m; i++){
            p = (p * d + pat[i]) % q;
            t = (t * d + text[i]) % q;
        }
    
        for(i = 0; i <= n-m; i++){
            if(p == t){
            //check for each char window
                for(j = 0; j < m; j++){
                    if(pat[j] != text[i+j])
                        break; //break out of this loop
                }
                if(j == m)
                    ans.push_back(i+1);
                
            }
            else {
                //move window by 1, new hash(rolling hash)
                t = (d * (t - h * text[i]) + text[i+m] ) % q;
                if(t < 0)
                    t = t + q;
            }
          
        }
    if(ans.size() > 0)
        return ans;
    else{
        ans.push_back(-1);
        return ans;
    }
        
}
     
};

