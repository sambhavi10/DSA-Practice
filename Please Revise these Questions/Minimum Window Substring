//LEETCODE HARD
//COULDNT CODE ON MY OWN, EVEN AFTER UNDERSTANDING THE LOGIC
// EDGE CASES
//REVISE AS MANY TIMES AS POSSIBLE



class Solution {
public:    
    string minWindow(string s, string t) {
      
        string result;//finally return  s.substr(startIdx,len)
       
        unordered_map<char, int> mp;
        int ans = INT_MAX;
        int startIdx;
        int len=INT_MAX; //to store the length of minimum window
        for(int i = 0; i < t.length(); i++)
            mp[t[i]]++;
        int count = mp.size();
        int i=0, j=0;
        int n = s.length(); 
        
        
        while(j < n){
    
        if(mp.find(s[j])!=mp.end()){
           
            mp[s[j]]--;
            if(mp[s[j]]==0)
            count--;
        }
         // we still have unique char left ,so slide j
        if(count > 0)
            j++;

        // when all unique char are used , count == 0 , we have a candidate
        else if(count==0)  { 
            
            // if we get a smaller window size , update min len and derive ans
           if(j-i+1 < len){
               
               len=min(len,j-i+1); 
               startIdx = i;
               result = s.substr(startIdx,len);
           }
           
            // trying to minimize the window size even after getting a potential candidate
           while(count == 0){
               
               //couldn't find in freq map , we can remove the char safely
               if(mp.find(s[i])==mp.end()){
                   
                  i++;
                   
                  // if we get a smaller window size , update min len and derive ans 
                  if(j-i+1 < len){
                      
                       len=min(len,j-i+1); 
                       startIdx = i;
                       result = s.substr(startIdx,len);
                   }
               }
                //if found in map , increment the frq of char           
               else {
                   mp[s[i]]++;
                   
                    // we only need to increment the count  when freq become one , we dont have an ans here 
                   if(mp[s[i]]==1){
                       
                       i++;
                       count++;
                   }
                   // jitna chahiye usse zyada hai, have extra char left , we can remove the char safely,
                    //will give a new answer
                   else {  
                       i++;
                       // if we get a smaller window size , update min len and derive ans 
                       if(j-i+1 < len){
                           len=min(len,j-i+1); 
                           startIdx = i;
                           result = s.substr(startIdx,len);
                       }
                   }
               }
           }
           j++; 
       }
    }
        
        
        return (len==INT_MAX ? "":result);
     
    }

};
