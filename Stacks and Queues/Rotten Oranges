class Solution {
    
    public:
    //Function to find minimum time required to rot all oranges. 
    int orangesRotting(vector<vector<int>>& grid) {
        
        if(grid.empty())
            return 0;
            
        int m = grid.size();
        int n = grid[0].size();
        int mins = 0;
        int count = 0;
        int oranges = 0;
        queue<pair<int, int>> q;
        
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j] == 1 || grid[i][j] == 2)
                    oranges++;
                if(grid[i][j] == 2)
                    q.push({i,j});
                
            }
        }
        while(!q.empty()){
            int size = q.size();
            count += size;
           
            while(size > 0){
                int x = q.front().first;
                int y = q.front().second;
                q.pop();
                if(x+1<m && grid[x+1][y] == 1){
                    grid[x+1][y] = 2;
                    q.push({x+1,y});
                }
                if(y+1<n && grid[x][y+1] == 1 ){
                    grid[x][y+1] = 2;
                    q.push({x,y+1});
                }
                if(x-1>=0 && grid[x-1][y] == 1){
                    grid[x-1][y] = 2;
                    q.push({x-1,y});
                }
                if(y-1>=0 && grid[x][y-1] == 1){
                    grid[x][y-1] = 2;
                    q.push({x,y-1});
                }
               size--;
            }
            mins++; //after every iteration
            
        }
        if(count == oranges)
            return mins-1;
        return -1;
    }
};
