class Solution{
  public:
  
    int MAH(vector<int> arr, int m){
        
        //int m = arr.size();
        vector<int> left(m);
        vector<int> right(m);
        stack<int> stack;
        
        for(int i=0; i<m; i++){
            while(!stack.empty() && arr[stack.top()] >= arr[i]){
                stack.pop();
            }
            if(stack.empty()){
                left[i] = 0;
            }
            else{
                left[i] = stack.top() + 1;
            }
            stack.push(i);
        }
        
        while(!stack.empty()){
            stack.pop();
        }
        
        for(int i=m-1; i>=0; i--){
            while(!stack.empty() && arr[stack.top()] >= arr[i]){
                stack.pop();
            }
            if(stack.empty()){
                right[i] = m;
            }
            else{
                right[i] = stack.top();
            }
            stack.push(i);
        }
        
        int result = 0;
        
        for(int i=0; i<m; i++){
            result = max(result, (right[i]-left[i])*arr[i]);
        }

        return result;
    }
    
    
  
    int maxArea(int M[MAX][MAX], int n, int m) {
        
        vector<int> heights(m,0);
        int maxArea = 0;
        for(int j=0;j<m;j++){
            heights[j] = M[0][j];
        }
        maxArea = MAH(heights, m);
        for(int i=1;i<n;i++){
            for(int j=0;j<m;j++){
                if(M[i][j] == 1)
                    heights[j]++;
                else
                    heights[j] = 0;
            }
            int area = MAH(heights, m);
            maxArea = max(maxArea, area);
        }
        return maxArea;
    }
    
};
