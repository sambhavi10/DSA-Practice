class Solution {
  public:
    bool isPalindrome(string s, int start, int end) {
        while (start <= end) {
            if (s[start++] != s[end--])
                return false;
            }
            return true;
  }
    void PalindromePartitions(string s, int index, vector<string> &seq, vector<vector<string>> &ans){
        if (index == s.size()) {
            ans.push_back(seq);
            return;
        }
        for (int i = index; i < s.size(); ++i) {
            if (isPalindrome(s, index, i)) {
                seq.push_back(s.substr(index, i - index + 1));
                PalindromePartitions(s,i+1, seq, ans);
                seq.pop_back();
      }
    }
    }
  
    vector<vector<string>> allPalindromicPerms(string S) {
        vector<vector<string>> ans;
        vector<string> seq;
        PalindromePartitions(S, 0, seq, ans);
        return ans;
        
    }
};
